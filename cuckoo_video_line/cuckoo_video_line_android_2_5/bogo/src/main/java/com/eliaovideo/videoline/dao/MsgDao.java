package com.eliaovideo.videoline.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.eliaovideo.videoline.msg.modle.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MyAccount = new Property(1, String.class, "myAccount", false, "MY_ACCOUNT");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
        public final static Property S = new Property(7, String.class, "s", false, "S");
        public final static Property I = new Property(8, int.class, "i", false, "I");
    };


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MY_ACCOUNT\" TEXT," + // 1: myAccount
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"MSG\" TEXT," + // 3: msg
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"DATE\" INTEGER," + // 6: date
                "\"S\" TEXT," + // 7: s
                "\"I\" INTEGER NOT NULL );"); // 8: i
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String myAccount = entity.getMyAccount();
        if (myAccount != null) {
            stmt.bindString(2, myAccount);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getStatus());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
 
        String s = entity.getS();
        if (s != null) {
            stmt.bindString(8, s);
        }
        stmt.bindLong(9, entity.getI());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String myAccount = entity.getMyAccount();
        if (myAccount != null) {
            stmt.bindString(2, myAccount);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getStatus());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
 
        String s = entity.getS();
        if (s != null) {
            stmt.bindString(8, s);
        }
        stmt.bindLong(9, entity.getI());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // s
            cursor.getInt(offset + 8) // i
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setI(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
